package view;

import control.GerenciadorDeInterface;
import control.VendaAbstractTableModel;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import model.Cliente;
import model.Item_Venda;
import model.Produto;
import model.Venda;
import org.hibernate.HibernateException;

/**
 *
 * @author wanes
 */
public class Dlg_Menu extends javax.swing.JDialog {
    
    private Venda vendaAtual = null;
    private VendaAbstractTableModel vendaTableModel;
    private Cliente clienteSelecionado = null;
    private Produto produtoSelecionado = null;
    
    public Dlg_Menu(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        vendaTableModel = new VendaAbstractTableModel();
        tableVenda.setModel(vendaTableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpanMenu = new javax.swing.JTabbedPane();
        panClientes = new javax.swing.JPanel();
        btCancelarCliente = new javax.swing.JButton();
        btListarCliente = new javax.swing.JButton();
        fieldNomeCliente = new javax.swing.JTextField();
        labNomeCliente = new javax.swing.JLabel();
        formatTelefoneCliente = new javax.swing.JFormattedTextField();
        labTelefoneCliente = new javax.swing.JLabel();
        labCpfCliente = new javax.swing.JLabel();
        formatCpfCliente = new javax.swing.JFormattedTextField();
        labCadastroCliente = new javax.swing.JLabel();
        btAdicionarCliente = new javax.swing.JButton();
        panProduto = new javax.swing.JTabbedPane();
        panCadastrarProduto = new javax.swing.JPanel();
        btListarProduto = new javax.swing.JButton();
        btAdicionarProduto = new javax.swing.JButton();
        cbUnidadeMedidaProduto = new javax.swing.JComboBox<>();
        formatTamProduto = new javax.swing.JFormattedTextField();
        labTamProduto = new javax.swing.JLabel();
        fieldNomeProduto = new javax.swing.JTextField();
        labNomeProduto = new javax.swing.JLabel();
        labQtEstoqueProduto = new javax.swing.JLabel();
        formatQtProduto = new javax.swing.JFormattedTextField();
        formatPrecoProduto = new javax.swing.JFormattedTextField();
        labPrecoProduto = new javax.swing.JLabel();
        cbCategoriaProduto = new javax.swing.JComboBox<>();
        btCancelarProduto = new javax.swing.JButton();
        labCadastrarProduto = new javax.swing.JLabel();
        panControleEstoque = new javax.swing.JPanel();
        btAdicionarEstoque = new javax.swing.JButton();
        labQtEstoque = new javax.swing.JLabel();
        btCancelarEstoque = new javax.swing.JButton();
        labNomeEstoque = new javax.swing.JLabel();
        fieldNomeEstoque = new javax.swing.JTextField();
        btBuscarEstoque = new javax.swing.JButton();
        labAdicionarEstoque = new javax.swing.JLabel();
        fieldQtEstoque = new javax.swing.JFormattedTextField();
        panVenda = new javax.swing.JPanel();
        labTotalVenda = new javax.swing.JLabel();
        formatTotalVenda = new javax.swing.JFormattedTextField();
        labNomeVenda = new javax.swing.JLabel();
        scrolpanCarrinho = new javax.swing.JScrollPane();
        tableVenda = new javax.swing.JTable();
        labQtVenda = new javax.swing.JLabel();
        formatQtVenda = new javax.swing.JFormattedTextField();
        btEditarVenda = new javax.swing.JButton();
        btFinalizarVenda = new javax.swing.JButton();
        btCancelarVenda = new javax.swing.JButton();
        labVenda = new javax.swing.JLabel();
        fieldNomeVenda = new javax.swing.JTextField();
        btBuscarProduto = new javax.swing.JButton();
        btAdicionarVenda = new javax.swing.JButton();
        btEncerrar = new javax.swing.JToggleButton();
        labImagemFundo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tpanMenu.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tpanMenu.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N

        panClientes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btCancelarCliente.setMnemonic('C');
        btCancelarCliente.setText("Cancelar");
        btCancelarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarClienteActionPerformed(evt);
            }
        });
        panClientes.add(btCancelarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 210, 90, 30));

        btListarCliente.setMnemonic('L');
        btListarCliente.setText("Listar");
        btListarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btListarClienteActionPerformed(evt);
            }
        });
        panClientes.add(btListarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 100, 30));
        panClientes.add(fieldNomeCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 280, 30));

        labNomeCliente.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labNomeCliente.setText("Nome:");
        panClientes.add(labNomeCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, -1, 30));

        try {
            formatTelefoneCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        formatTelefoneCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatTelefoneClienteActionPerformed(evt);
            }
        });
        panClientes.add(formatTelefoneCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 100, 30));

        labTelefoneCliente.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labTelefoneCliente.setText("Telefone:");
        panClientes.add(labTelefoneCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, -1, 30));

        labCpfCliente.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labCpfCliente.setText("CPF:");
        panClientes.add(labCpfCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, -1, 30));

        try {
            formatCpfCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        formatCpfCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatCpfClienteActionPerformed(evt);
            }
        });
        panClientes.add(formatCpfCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 100, 30));

        labCadastroCliente.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        labCadastroCliente.setText("CADASTRO CLIENTE");
        panClientes.add(labCadastroCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        btAdicionarCliente.setMnemonic('A');
        btAdicionarCliente.setText("Adicionar");
        btAdicionarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarClienteActionPerformed(evt);
            }
        });
        panClientes.add(btAdicionarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 210, 100, 30));

        tpanMenu.addTab("Clientes", panClientes);

        panProduto.setForeground(new java.awt.Color(102, 51, 0));
        panProduto.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        panProduto.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N

        panCadastrarProduto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btListarProduto.setMnemonic('L');
        btListarProduto.setText("Listar");
        btListarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btListarProdutoActionPerformed(evt);
            }
        });
        panCadastrarProduto.add(btListarProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, 90, 30));

        btAdicionarProduto.setMnemonic('A');
        btAdicionarProduto.setText("Adicionar");
        btAdicionarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarProdutoActionPerformed(evt);
            }
        });
        panCadastrarProduto.add(btAdicionarProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 220, 90, 30));

        cbUnidadeMedidaProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unid Medida", "g", "kg", "ml", " " }));
        panCadastrarProduto.add(cbUnidadeMedidaProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 110, 30));

        formatTamProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        panCadastrarProduto.add(formatTamProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 60, 30));

        labTamProduto.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labTamProduto.setText("Tam/Pes:");
        panCadastrarProduto.add(labTamProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, -1, 30));
        panCadastrarProduto.add(fieldNomeProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 150, 30));

        labNomeProduto.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labNomeProduto.setText("Nome:");
        panCadastrarProduto.add(labNomeProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, -1, 30));

        labQtEstoqueProduto.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labQtEstoqueProduto.setText("Qt. estoque:");
        panCadastrarProduto.add(labQtEstoqueProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 170, -1, 30));

        formatQtProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        formatQtProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatQtProdutoActionPerformed(evt);
            }
        });
        panCadastrarProduto.add(formatQtProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, 60, 30));

        formatPrecoProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        panCadastrarProduto.add(formatPrecoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 60, 30));

        labPrecoProduto.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labPrecoProduto.setText("Preço Unit:");
        panCadastrarProduto.add(labPrecoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, -1, 30));

        cbCategoriaProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Categoria", "Café", "Chá", "Bebida", "Salgado", "Bolo", "Pão", " ", " " }));
        cbCategoriaProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoriaProdutoActionPerformed(evt);
            }
        });
        panCadastrarProduto.add(cbCategoriaProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 90, 90, 30));

        btCancelarProduto.setMnemonic('C');
        btCancelarProduto.setText("Cancelar");
        btCancelarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarProdutoActionPerformed(evt);
            }
        });
        panCadastrarProduto.add(btCancelarProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 220, 90, 30));

        labCadastrarProduto.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        labCadastrarProduto.setText("CADASTRO PRODUTO");
        panCadastrarProduto.add(labCadastrarProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, -1, -1));

        panProduto.addTab("Cadastrar Produtos", panCadastrarProduto);

        panControleEstoque.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btAdicionarEstoque.setMnemonic('A');
        btAdicionarEstoque.setText("Adicionar");
        btAdicionarEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarEstoqueActionPerformed(evt);
            }
        });
        panControleEstoque.add(btAdicionarEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, 90, 30));

        labQtEstoque.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labQtEstoque.setText("Adicionar Quantidade:");
        panControleEstoque.add(labQtEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, -1, 30));

        btCancelarEstoque.setMnemonic('C');
        btCancelarEstoque.setText("Cancelar");
        btCancelarEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarEstoqueActionPerformed(evt);
            }
        });
        panControleEstoque.add(btCancelarEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 90, 30));

        labNomeEstoque.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labNomeEstoque.setText("Produto:");
        panControleEstoque.add(labNomeEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, -1, 30));

        fieldNomeEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNomeEstoqueActionPerformed(evt);
            }
        });
        panControleEstoque.add(fieldNomeEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 170, 30));

        btBuscarEstoque.setMnemonic('B');
        btBuscarEstoque.setText("Buscar");
        btBuscarEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarEstoqueActionPerformed(evt);
            }
        });
        panControleEstoque.add(btBuscarEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 80, 30));

        labAdicionarEstoque.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        labAdicionarEstoque.setText("ADICIONAR ESTOQUE");
        panControleEstoque.add(labAdicionarEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, -1, -1));

        fieldQtEstoque.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        fieldQtEstoque.setText("0");
        fieldQtEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldQtEstoqueActionPerformed(evt);
            }
        });
        panControleEstoque.add(fieldQtEstoque, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 80, 30));

        panProduto.addTab("Controle de Estoque", panControleEstoque);

        tpanMenu.addTab("Produtos", panProduto);

        panVenda.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labTotalVenda.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labTotalVenda.setText("TOTAL:");
        panVenda.add(labTotalVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 260, -1, 30));

        formatTotalVenda.setEditable(false);
        formatTotalVenda.setBorder(null);
        formatTotalVenda.setForeground(new java.awt.Color(252, 1, 1));
        formatTotalVenda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        formatTotalVenda.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        formatTotalVenda.setText("0,00");
        formatTotalVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatTotalVendaActionPerformed(evt);
            }
        });
        panVenda.add(formatTotalVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 260, 70, 30));

        labNomeVenda.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labNomeVenda.setText("Produto:");
        panVenda.add(labNomeVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, 30));

        tableVenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Qt", "Preco Unitário", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrolpanCarrinho.setViewportView(tableVenda);

        panVenda.add(scrolpanCarrinho, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 610, 110));

        labQtVenda.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        labQtVenda.setText("Quantidade:");
        panVenda.add(labQtVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 50, -1, 30));

        formatQtVenda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        formatQtVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatQtVendaActionPerformed(evt);
            }
        });
        panVenda.add(formatQtVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 50, 50, 30));

        btEditarVenda.setMnemonic('A');
        btEditarVenda.setText("Selecionar");
        btEditarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarVendaActionPerformed(evt);
            }
        });
        panVenda.add(btEditarVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 260, 100, 30));

        btFinalizarVenda.setMnemonic('F');
        btFinalizarVenda.setText("Finalizar");
        btFinalizarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFinalizarVendaActionPerformed(evt);
            }
        });
        panVenda.add(btFinalizarVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 100, 30));

        btCancelarVenda.setMnemonic('C');
        btCancelarVenda.setText("Cancelar");
        btCancelarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarVendaActionPerformed(evt);
            }
        });
        panVenda.add(btCancelarVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 100, 30));

        labVenda.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        labVenda.setText("VENDA");
        panVenda.add(labVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, -1));

        fieldNomeVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNomeVendaActionPerformed(evt);
            }
        });
        panVenda.add(fieldNomeVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 140, 30));

        btBuscarProduto.setText("Buscar");
        btBuscarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarProdutoActionPerformed(evt);
            }
        });
        panVenda.add(btBuscarProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, 90, 30));

        btAdicionarVenda.setBackground(new java.awt.Color(102, 204, 255));
        btAdicionarVenda.setForeground(new java.awt.Color(255, 255, 255));
        btAdicionarVenda.setMnemonic('A');
        btAdicionarVenda.setText("Adicionar produto ao carrinho");
        btAdicionarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarVendaActionPerformed(evt);
            }
        });
        panVenda.add(btAdicionarVenda, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 210, 30));

        tpanMenu.addTab("Vendas", panVenda);

        getContentPane().add(tpanMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 650, 340));

        btEncerrar.setBackground(new java.awt.Color(204, 204, 204));
        btEncerrar.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        btEncerrar.setText("SAIR");
        btEncerrar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btEncerrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btEncerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btEncerrarMouseClicked(evt);
            }
        });
        btEncerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEncerrarActionPerformed(evt);
            }
        });
        getContentPane().add(btEncerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, 60, 40));

        labImagemFundo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imagem-fundo-2.png"))); // NOI18N
        getContentPane().add(labImagemFundo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btEncerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEncerrarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btEncerrarActionPerformed

    private void btEncerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btEncerrarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btEncerrarMouseClicked

    private void btAdicionarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarProdutoActionPerformed

        if(validarCamposProduto()){
            String nome = fieldNomeProduto.getText(),
            unidMedida = (String) cbUnidadeMedidaProduto.getSelectedItem(),
            categoria = (String) cbCategoriaProduto.getSelectedItem();
            double valor = Double.parseDouble(formatPrecoProduto.getText().replace(',', '.'));
            int estoque = Integer.parseInt(formatQtProduto.getText());
            double tam_pes = Double.parseDouble(formatTamProduto.getText().replace(',', '.'));

            try {
                List<Object> produtoExistente = GerenciadorDeInterface.getInstance().getDominio().pesquisarProduto(nome, 1);
                if (produtoExistente != null && !produtoExistente.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Produto com o nome " + nome + " já existe.", "ERRO: Adicionar Produto", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(Dlg_Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try{
                Produto produto = GerenciadorDeInterface.getInstance().getDominio().inserirProduto(nome, valor, tam_pes, unidMedida, categoria, estoque);
                JOptionPane.showMessageDialog(this, "Produto " + produto.getIdProduto() + " inserido com sucesso.", "Cadastro Produto", JOptionPane.INFORMATION_MESSAGE);                
            }catch(HibernateException ex){
                JOptionPane.showMessageDialog(this, "Erro nos dados: " + ex.getMessage(), "ERRO: Cadastro Produto", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btAdicionarProdutoActionPerformed

    private void btListarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btListarProdutoActionPerformed
        this.setVisible(false);
        try {
            GerenciadorDeInterface.getInstance().abrirJanelaDlg_Listar_Produtos();
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(Dlg_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btListarProdutoActionPerformed

    private void btCancelarEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarEstoqueActionPerformed

    }//GEN-LAST:event_btCancelarEstoqueActionPerformed

    private void btAdicionarEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarEstoqueActionPerformed

        if (fieldNomeEstoque.getText().isEmpty() || fieldQtEstoque.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos", "ERRO: Adicionar Estoque", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int estoque = Integer.parseInt(fieldQtEstoque.getText());
            System.out.println(estoque);
            List<Object> produtos = GerenciadorDeInterface.getInstance().getDominio().pesquisarProduto(fieldNomeEstoque.getText(), 1);

            if (produtos != null && !produtos.isEmpty()) {
                Produto produto = (Produto) produtos.get(0);
                if (produto != null) {
                    try {
                        GerenciadorDeInterface.getInstance().getDominio().adicionarQuantidadeProduto(produto, estoque);
                        JOptionPane.showMessageDialog(this, "Estoque adicionado!", "Adicionar Estoque", JOptionPane.INFORMATION_MESSAGE);
                    } catch (HibernateException ex) {
                        JOptionPane.showMessageDialog(this, "Erro ao atualizar o estoque: " + ex.getMessage(), "ERRO: Adicionar Estoque", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Produto " + fieldNomeEstoque.getText() + " não encontrado", "ERRO: Adicionar Estoque", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Produto " + fieldNomeEstoque.getText() + " não encontrado", "ERRO: Adicionar Estoque", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantidade: " + fieldQtEstoque.getText() + " inválida.", "ERRO: Adicionar Estoque", JOptionPane.ERROR_MESSAGE);
        }   catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Dlg_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        fieldNomeEstoque.setText("");
        fieldQtEstoque.setText("0");
        
    }//GEN-LAST:event_btAdicionarEstoqueActionPerformed

    private void formatTelefoneClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatTelefoneClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatTelefoneClienteActionPerformed

    private void formatCpfClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatCpfClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatCpfClienteActionPerformed

    private void btListarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btListarClienteActionPerformed
        this.setVisible(false);
        try {
            GerenciadorDeInterface.getInstance().abrirJanelaDlg_Listar_Clientes();
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(Dlg_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btListarClienteActionPerformed

    private void btCancelarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarClienteActionPerformed
        limparCamposCliente();
    }//GEN-LAST:event_btCancelarClienteActionPerformed

    private void btCancelarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarProdutoActionPerformed
        limparCamposProduto();
    }//GEN-LAST:event_btCancelarProdutoActionPerformed

    private void fieldNomeEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNomeEstoqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNomeEstoqueActionPerformed

    private void btBuscarEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarEstoqueActionPerformed
        buscarEstoque();
    }//GEN-LAST:event_btBuscarEstoqueActionPerformed

    private void buscarEstoque() {
        try {
            List<Produto> produtosFiltrados = new ArrayList<>();
            String pesquisa = fieldNomeEstoque.getText().trim();

            List<Produto> produtos = GerenciadorDeInterface.getInstance().getDominio().listar(Produto.class);
            for (Produto produto : produtos) {
                if (produto.getNome().toLowerCase().contains(pesquisa.toLowerCase()) ||
                    produto.getCategoria().toLowerCase().contains(pesquisa.toLowerCase()) ||
                    String.valueOf(produto.getTam_pes()).contains(pesquisa) ||
                    produto.getUnidMedida().toLowerCase().contains(pesquisa.toLowerCase()) ||
                    String.valueOf(produto.getValor()).contains(pesquisa) ||
                    String.valueOf(produto.getEstoque()).contains(pesquisa) ||
                    String.valueOf(produto.getIdProduto()).contains(pesquisa)) {

                    produtosFiltrados.add(produto);
                }
            }

            if (produtosFiltrados.isEmpty()) {
                mostrarMensagem("Nenhum produto encontrado com os critérios de busca.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                fieldNomeEstoque.setText("");
            } else if (produtosFiltrados.size() == 1) {
                Produto produto = produtosFiltrados.get(0);
                fieldNomeEstoque.setText(produto.getNome());
                produtoSelecionado = produto; // Armazenar o produto selecionado para uso posterior
            } else {
                // Mais de um produto encontrado, pedir seleção ao usuário
                Produto[] produtosArray = produtosFiltrados.toArray(Produto[]::new);
                Produto produtoSelecionado2 = (Produto) JOptionPane.showInputDialog(null,
                        "Vários produtos encontrados. Selecione um:",
                        "Seleção de Produto",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        produtosArray,
                        produtosArray[0]);

                if (produtoSelecionado2 != null) {
                    fieldNomeEstoque.setText(produtoSelecionado2.getNome());
                    this.produtoSelecionado = produtoSelecionado2; // Armazenar o produto selecionado para uso posterior
                } else {
                    mostrarMensagem("Nenhum produto selecionado.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Dlg_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btCancelarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarVendaActionPerformed
        if (vendaTableModel.getRowCount() == 0) {
            mostrarMensagem("Não há nenhum produto na tabela!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            return; 
        }
        int confirmar = JOptionPane.showConfirmDialog(null, "Você tem certeza que deseja cancelar a venda? Todos os itens serão removidos.", "Confirmar Cancelamento", JOptionPane.YES_NO_OPTION);

        if (confirmar == JOptionPane.YES_OPTION) {
            limparCamposVenda();
            mostrarMensagem("Venda cancelada com sucesso.", "Informação", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_btCancelarVendaActionPerformed

    private void btFinalizarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFinalizarVendaActionPerformed

        if (vendaTableModel.getRowCount() == 0) {
            mostrarMensagem("Nenhum item na tabela de venda para finalizar.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Cliente clienteSelecionado2 = selecionarCliente();
        if (clienteSelecionado2 == null) {
            mostrarMensagem("Nenhum cliente selecionado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int confirmar = JOptionPane.showConfirmDialog(this, "Você tem certeza que deseja finalizar a venda?", "Confirmar Finalização", JOptionPane.YES_NO_OPTION);
        if (confirmar == JOptionPane.YES_OPTION) {
            double totalVenda = vendaTableModel.calcularTotal();
            try {
                Venda venda = GerenciadorDeInterface.getInstance().getDominio().inserirVenda(totalVenda, clienteSelecionado2);
                for (Item_Venda item : vendaTableModel.getListaItens()) {
                    Produto produto = item.getProduto();
                    int novaQuantidade = produto.getEstoque() - item.getQtProduto();
                    produto.setEstoque(novaQuantidade);
                    GerenciadorDeInterface.getInstance().getDominio().atualizarProduto(produto);
                    GerenciadorDeInterface.getInstance().getDominio().adicionarItemVenda(new Item_Venda(produto, venda, item.getQtProduto()));
                }

                mostrarMensagem("Venda finalizada com sucesso. Total: R$ " + String.format("%.2f", totalVenda), "Informação", JOptionPane.INFORMATION_MESSAGE);
                limparCamposVenda();
            } catch (Exception ex) {
                mostrarErro("Erro ao finalizar a venda: " + ex.getMessage(), ex);
            }
        }  
    }//GEN-LAST:event_btFinalizarVendaActionPerformed
    
    private Cliente selecionarCliente() {
        List<Cliente> clientes;
        try {
            clientes = GerenciadorDeInterface.getInstance().getDominio().listar(Cliente.class);
        } catch (ClassNotFoundException | SQLException ex) {
            mostrarErro("Erro ao carregar clientes: " + ex.getMessage(), ex);
            return null;
        }
        
        if (clientes.isEmpty()) {
            mostrarMensagem("Nenhum cliente encontrado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return null;
        }
        
        Set<Cliente> clienteSet = new LinkedHashSet<>(clientes); 
        JComboBox<Cliente> cbClientes = new JComboBox<>(new DefaultComboBoxModel<>(clienteSet.toArray(new Cliente[0])));

        int result = JOptionPane.showConfirmDialog(this, cbClientes, "Selecionar Cliente", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            Cliente clienteSelecionado2 = (Cliente) cbClientes.getSelectedItem();
            return clienteSelecionado2;
        } else {
            mostrarMensagem("Nenhum cliente selecionado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return null;
        }
    }
    
    private void formatTotalVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatTotalVendaActionPerformed
    }//GEN-LAST:event_formatTotalVendaActionPerformed

    private void fieldQtEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldQtEstoqueActionPerformed
    }//GEN-LAST:event_fieldQtEstoqueActionPerformed

    private void formatQtProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatQtProdutoActionPerformed
    }//GEN-LAST:event_formatQtProdutoActionPerformed

    private void btEditarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarVendaActionPerformed

        int selectedRow = tableVenda.getSelectedRow();
        if (selectedRow < 0) {
            mostrarMensagem("Nenhum item selecionado para editar ou excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtém o item selecionado da tabela
        Item_Venda itemSelecionado = vendaTableModel.getListaItens().get(selectedRow);

        // Exibe um diálogo para selecionar a ação: Alterar ou Excluir
        String[] options = {"Alterar", "Excluir"};
        int escolha = JOptionPane.showOptionDialog(
                this, 
                "O que você deseja fazer com o item selecionado?", 
                "Alterar Tabela Venda", 
                JOptionPane.DEFAULT_OPTION, 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                options, 
                options[0] // Opção padrão
        );

        if (escolha == 0) { // Alterar
            alterarItemVenda(itemSelecionado);
        } else if (escolha == 1) { // Excluir
            excluirItemVenda(itemSelecionado, selectedRow);
        }
    }//GEN-LAST:event_btEditarVendaActionPerformed

    private void alterarItemVenda(Item_Venda itemSelecionado) {
        String novaQuantidadeStr = JOptionPane.showInputDialog(
                this, 
                "Digite a nova quantidade:", 
                itemSelecionado.getQtProduto()
        );

        try {
            int novaQuantidade = Integer.parseInt(novaQuantidadeStr);
            if (novaQuantidade <= 0) {
                mostrarMensagem("A quantidade deve ser maior que zero.", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Atualiza a quantidade do item na lista de itens da venda atual
            Item_Venda itemVendaAtual = vendaAtual.getItem_venda()
                    .stream()
                    .filter(item -> item.getProduto().getIdProduto() == itemSelecionado.getProduto().getIdProduto())
                    .findFirst()
                    .orElse(null);

            if (itemVendaAtual != null) {
                itemVendaAtual.setQtProduto(novaQuantidade);
                int rowIndex = vendaTableModel.getListaItens().indexOf(itemSelecionado);
                if (rowIndex >= 0) {
                    // Atualiza o item na tabela
                    vendaTableModel.getListaItens().set(rowIndex, itemVendaAtual);
                    vendaTableModel.fireTableRowsUpdated(rowIndex, rowIndex);
                }
                calcularTotalVenda();
            } else {
                mostrarMensagem("Item não encontrado na venda atual.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }

        } catch (NumberFormatException ex) {
            mostrarMensagem("Quantidade inválida.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void excluirItemVenda(Item_Venda itemSelecionado, int rowIndex) {
        int confirmar = JOptionPane.showConfirmDialog(
                this, 
                "Tem certeza de que deseja excluir o item selecionado?", 
                "Confirmar Exclusão", 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE
        );

        if (confirmar == JOptionPane.YES_OPTION) { 
            boolean itemRemovido = vendaAtual.getItem_venda().removeIf(item -> item.getProduto().getIdProduto() == itemSelecionado.getProduto().getIdProduto());

            // Remove o item da tabela de venda
            if (itemRemovido) {
                vendaTableModel.getListaItens().remove(rowIndex);
                atualizarTabelaItensVenda();
                calcularTotalVenda();
            
            }
        }
    }

    
    private void btAdicionarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarClienteActionPerformed
        
        if(validarCamposCliente()){
            String nome = fieldNomeCliente.getText();
            String cpf = formatCpfCliente.getText();
            String tel = formatTelefoneCliente.getText();
            
            if(!validarCpfUnico(cpf)){
                formatCpfCliente.setText("");
                return;
            }                
            
            try{
                Cliente cliente = GerenciadorDeInterface.getInstance().getDominio().inserirCliente(nome, cpf, tel);
                JOptionPane.showMessageDialog(this, "Cliente " + cliente.getIdCliente() + " inserido com sucesso.", "Cadastro Cliente", JOptionPane.INFORMATION_MESSAGE);
                limparCamposCliente();
            }catch(HibernateException ex){
                JOptionPane.showMessageDialog(this, "Erro nos dados: " + ex.getMessage(), "ERRO Cadastro Cliente", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btAdicionarClienteActionPerformed

    private void fieldNomeVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNomeVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNomeVendaActionPerformed

    private void formatQtVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatQtVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatQtVendaActionPerformed

    private void btBuscarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarProdutoActionPerformed
        buscarProduto();
    }//GEN-LAST:event_btBuscarProdutoActionPerformed

    private void buscarProduto(){
    
        try {
            List<Produto> produtosFiltrados = new ArrayList<>();
            String pesquisa = fieldNomeVenda.getText().trim();

            List<Produto> produtos = GerenciadorDeInterface.getInstance().getDominio().listar(Produto.class);
            for (Produto produto : produtos) {
                if (produto.getNome().toLowerCase().contains(pesquisa.toLowerCase()) ||
                    produto.getCategoria().toLowerCase().contains(pesquisa.toLowerCase()) ||
                    String.valueOf(produto.getTam_pes()).contains(pesquisa) ||
                    produto.getUnidMedida().toLowerCase().contains(pesquisa.toLowerCase()) ||
                    String.valueOf(produto.getValor()).contains(pesquisa) ||
                    String.valueOf(produto.getEstoque()).contains(pesquisa) ||
                    String.valueOf(produto.getIdProduto()).contains(pesquisa)) {

                    produtosFiltrados.add(produto);
                }
            }
            
            if (produtosFiltrados.isEmpty()) {
                mostrarMensagem("Nenhum produto encontrado com os critérios de busca.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                fieldNomeVenda.setText("");
            } else if (produtosFiltrados.size() == 1) {
                Produto produto = produtosFiltrados.get(0);
                fieldNomeVenda.setText(produto.getNome());
                produtoSelecionado = produto; // Armazenar o produto selecionado para uso posterior
            } else {
                // Mais de um produto encontrado, pedir seleção ao usuário
                Produto[] produtosArray = produtosFiltrados.toArray(Produto[]::new);
                Produto produtoSelecionado2 = (Produto) JOptionPane.showInputDialog(null,
                        "Vários produtos encontrados. Selecione um:",
                        "Seleção de Produto",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        produtosArray,
                        produtosArray[0]);

                if (produtoSelecionado2 != null) {
                    fieldNomeVenda.setText(produtoSelecionado2.getNome());
                    this.produtoSelecionado = produtoSelecionado2; // Armazenar o produto selecionado para uso posterior
                } else {
                    mostrarMensagem("Nenhum produto selecionado.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Dlg_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btAdicionarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarVendaActionPerformed

        // Inicializa a venda atual se for nula
        if (vendaAtual == null) {
            vendaAtual = new Venda();
            vendaAtual.setItem_venda(new ArrayList<>());
        }

        // Busca o produto selecionado
        buscarProduto();
        if (produtoSelecionado == null) {
            mostrarMensagem("Nenhum produto selecionado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int quantidade;
        try {
            quantidade = Integer.parseInt(formatQtVenda.getText().trim());
            if (quantidade <= 0) {
                mostrarMensagem("A quantidade deve ser maior que zero.", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (produtoSelecionado.getEstoque() <= 0) {
                mostrarMensagem("Produto fora de estoque.", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (quantidade > produtoSelecionado.getEstoque()) {
                mostrarMensagem("Quantidade solicitada (" + quantidade + ") excede o estoque disponível (" + produtoSelecionado.getEstoque() + ").", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException ex) {
            mostrarMensagem("Quantidade inválida.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            GerenciadorDeInterface.getInstance().getDominio().adicionarItemVendaTemp(produtoSelecionado, quantidade);
            vendaAtual.getItem_venda().add(new Item_Venda(produtoSelecionado, vendaAtual, quantidade));
        } catch (Exception ex) {
            mostrarMensagem("Erro ao adicionar produto à venda: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Atualiza a tabela de itens de venda e o total da venda
        calcularTotalVenda();
        atualizarTabelaItensVenda();

        // Limpa os campos de entrada
        formatQtVenda.setText("0");
        fieldNomeVenda.setText("");
    }//GEN-LAST:event_btAdicionarVendaActionPerformed

    private void calcularTotalVenda() {        
        double total = 0.0;
        if (vendaAtual != null && vendaAtual.getItem_venda() != null) {
            for (Item_Venda item : vendaAtual.getItem_venda()) {
                total += item.getProduto().getValor() * item.getQtProduto();
            }
        }
        formatTotalVenda.setText(String.format("%.2f", total));
    }
    
    private void atualizarTabelaItensVenda() {
        List<Item_Venda> itensVenda = GerenciadorDeInterface.getInstance().getDominio().getItensVendaTemp();
        vendaTableModel.setLista(itensVenda);
        vendaTableModel.fireTableDataChanged();
    }
    
    private void cbCategoriaProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoriaProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCategoriaProdutoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdicionarCliente;
    private javax.swing.JButton btAdicionarEstoque;
    private javax.swing.JButton btAdicionarProduto;
    private javax.swing.JButton btAdicionarVenda;
    private javax.swing.JButton btBuscarEstoque;
    private javax.swing.JButton btBuscarProduto;
    private javax.swing.JButton btCancelarCliente;
    private javax.swing.JButton btCancelarEstoque;
    private javax.swing.JButton btCancelarProduto;
    private javax.swing.JButton btCancelarVenda;
    private javax.swing.JButton btEditarVenda;
    private javax.swing.JToggleButton btEncerrar;
    private javax.swing.JButton btFinalizarVenda;
    private javax.swing.JButton btListarCliente;
    private javax.swing.JButton btListarProduto;
    private javax.swing.JComboBox<String> cbCategoriaProduto;
    private javax.swing.JComboBox<String> cbUnidadeMedidaProduto;
    private javax.swing.JTextField fieldNomeCliente;
    private javax.swing.JTextField fieldNomeEstoque;
    private javax.swing.JTextField fieldNomeProduto;
    private javax.swing.JTextField fieldNomeVenda;
    private javax.swing.JFormattedTextField fieldQtEstoque;
    private javax.swing.JFormattedTextField formatCpfCliente;
    private javax.swing.JFormattedTextField formatPrecoProduto;
    private javax.swing.JFormattedTextField formatQtProduto;
    private javax.swing.JFormattedTextField formatQtVenda;
    private javax.swing.JFormattedTextField formatTamProduto;
    private javax.swing.JFormattedTextField formatTelefoneCliente;
    private javax.swing.JFormattedTextField formatTotalVenda;
    private javax.swing.JLabel labAdicionarEstoque;
    private javax.swing.JLabel labCadastrarProduto;
    private javax.swing.JLabel labCadastroCliente;
    private javax.swing.JLabel labCpfCliente;
    private javax.swing.JLabel labImagemFundo;
    private javax.swing.JLabel labNomeCliente;
    private javax.swing.JLabel labNomeEstoque;
    private javax.swing.JLabel labNomeProduto;
    private javax.swing.JLabel labNomeVenda;
    private javax.swing.JLabel labPrecoProduto;
    private javax.swing.JLabel labQtEstoque;
    private javax.swing.JLabel labQtEstoqueProduto;
    private javax.swing.JLabel labQtVenda;
    private javax.swing.JLabel labTamProduto;
    private javax.swing.JLabel labTelefoneCliente;
    private javax.swing.JLabel labTotalVenda;
    private javax.swing.JLabel labVenda;
    private javax.swing.JPanel panCadastrarProduto;
    private javax.swing.JPanel panClientes;
    private javax.swing.JPanel panControleEstoque;
    private javax.swing.JTabbedPane panProduto;
    private javax.swing.JPanel panVenda;
    private javax.swing.JScrollPane scrolpanCarrinho;
    private javax.swing.JTable tableVenda;
    private javax.swing.JTabbedPane tpanMenu;
    // End of variables declaration//GEN-END:variables
    
    /* VALIDAR */
    private boolean validarCamposProduto() {
        String msgErro = "";
        
        colorBlackProduto();
          
        if(cbUnidadeMedidaProduto.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(this, "Digite Unidade de Medida válida!");
            return false;
        }
        
        if(cbCategoriaProduto.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(this, "Digite categoria válida!");
            return false;
        }
                
        if(fieldNomeProduto.getText().isEmpty()){
            msgErro = msgErro + "Adicione um nome.\n";
            labNomeProduto.setForeground(Color.red); 
        }
        
        if(formatPrecoProduto.getValue() == null){
            msgErro = msgErro + "Adicione um preço.\n";
            labPrecoProduto.setForeground(Color.red); 
        }
        
        if(formatQtProduto.getValue() == null){
            msgErro = msgErro + "Adicione um quantidade de estoque.\n";
            labQtEstoqueProduto.setForeground(Color.red); 
        }
        
        if(formatTamProduto.getValue() == null){
            msgErro = msgErro + "Adicione uma tamanho/ peso.\n";
            labTamProduto.setForeground(Color.red); 
        }
        
        if ( msgErro.isEmpty() ) {
            return true;
        } else {            
            JOptionPane.showMessageDialog(this, msgErro, "ERRO Produto", JOptionPane.ERROR_MESSAGE);
            return false;
        }        
    }
    
    private boolean validarCamposCliente() {
        String msgErro = "";
        
        colorBlackCliente();
                
        if(formatCpfCliente.getValue() == null){
            msgErro = msgErro + "Adicione um CPF.\n";
            labCpfCliente.setForeground(Color.red); 
        }
        
        if(fieldNomeCliente.getText().isEmpty()){
            msgErro = msgErro + "Adicione um nome.\n";
            labNomeCliente.setForeground(Color.red); 
        }
        
        if(formatTelefoneCliente.getValue() == null){
            msgErro = msgErro + "Adicione um celular.\n";
            labTelefoneCliente.setForeground(Color.red); 
        }
                        
        if ( msgErro.isEmpty() ) {
            return true;
        } else {            
            JOptionPane.showMessageDialog(this, msgErro, "ERRO Cliente", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    
    /* LAB BLACK */
    
    public void colorBlackProduto(){
        labNomeProduto.setForeground(Color.black);
        labPrecoProduto.setForeground(Color.black);
        labQtEstoqueProduto.setForeground(Color.black);
        labTamProduto.setForeground(Color.black);
    }
    
    public void colorBlackCliente(){
        labCpfCliente.setForeground(Color.black);
        labNomeCliente.setForeground(Color.black);
        labTelefoneCliente.setForeground(Color.black);
    }
        
    /* LIMPAR CAMPOS */
    
    
    public void limparCamposCliente(){
        formatCpfCliente.setText("");
        fieldNomeCliente.setText("");      
        formatTelefoneCliente.setText("");
    }
        
    public void limparCamposProduto(){
        fieldNomeProduto.setText("");
        fieldNomeProduto.setText("");
        formatQtProduto.setText("");
        formatPrecoProduto.setText("");
        formatTamProduto.setText("");
        cbUnidadeMedidaProduto.setSelectedIndex(0);
        cbCategoriaProduto.setSelectedIndex(0);
    }    
    
    private void limparCamposVenda() {
        vendaTableModel.limpar(); 
        fieldNomeVenda.setText("");
        formatQtVenda.setText("0");
        formatTotalVenda.setText("0,00");
        vendaAtual = null;
    }
    
    /* CLIENTE */
    
    private boolean validarCpfUnico(String cpf) {
        try {
            List<Object> cpfExistente = GerenciadorDeInterface.getInstance().getDominio().pesquisarCliente(cpf, 2);
            if (cpfExistente != null && !cpfExistente.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Cliente com o CPF " + cpf + " já existe.", "ERRO: Adicionar Cliente", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Dlg_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }
    
    
    /* AUXILIARES  */

    private void mostrarMensagem(String mensagem, String titulo, int tipo) {
        JOptionPane.showMessageDialog(this, mensagem, titulo, tipo);
    }

    private void mostrarErro(String mensagem, Exception ex) {
        Logger.getLogger(Dlg_Listar_Clientes.class.getName()).log(Level.SEVERE, mensagem, ex);
        mostrarMensagem(mensagem, "Erro", JOptionPane.ERROR_MESSAGE);
    }

}